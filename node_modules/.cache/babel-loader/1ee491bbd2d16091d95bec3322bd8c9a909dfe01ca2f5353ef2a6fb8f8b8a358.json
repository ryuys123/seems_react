{"ast":null,"code":"import axios from 'axios';\nimport { getApiConfig, TOKEN_CONFIG } from '../config/config';\n\n// Spring Boot 서버 기본 URL 설정\nconst API_BASE_URL = getApiConfig().baseURL;\n\n// axios 인스턴스 생성\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 요청 인터셉터 (토큰 추가)\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(TOKEN_CONFIG.accessTokenKey);\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 응답 인터셉터 (토큰 만료 처리)\napi.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // 토큰이 만료된 경우 refresh token으로 갱신 시도\n    const refreshToken = localStorage.getItem(TOKEN_CONFIG.refreshTokenKey);\n    if (refreshToken) {\n      try {\n        const response = await axios.post(`${API_BASE_URL}/reissue`, {\n          refreshToken: refreshToken\n        });\n        if (response.data.accessToken) {\n          localStorage.setItem(TOKEN_CONFIG.accessTokenKey, response.data.accessToken);\n          // 원래 요청 재시도\n          error.config.headers.Authorization = `Bearer ${response.data.accessToken}`;\n          return api.request(error.config);\n        }\n      } catch (refreshError) {\n        // refresh token도 만료된 경우 로그아웃\n        localStorage.removeItem(TOKEN_CONFIG.accessTokenKey);\n        localStorage.removeItem(TOKEN_CONFIG.refreshTokenKey);\n        window.location.href = '/login';\n      }\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","getApiConfig","TOKEN_CONFIG","API_BASE_URL","baseURL","api","create","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","accessTokenKey","Authorization","error","Promise","reject","response","_error$response","status","refreshToken","refreshTokenKey","post","data","accessToken","setItem","refreshError","removeItem","window","location","href"],"sources":["D:/seems/seems_react/seems/src/utils/axios.js"],"sourcesContent":["import axios from 'axios';\r\nimport { getApiConfig, TOKEN_CONFIG } from '../config/config';\r\n\r\n// Spring Boot 서버 기본 URL 설정\r\nconst API_BASE_URL = getApiConfig().baseURL;\r\n\r\n// axios 인스턴스 생성\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// 요청 인터셉터 (토큰 추가)\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem(TOKEN_CONFIG.accessTokenKey);\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// 응답 인터셉터 (토큰 만료 처리)\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    if (error.response?.status === 401) {\r\n      // 토큰이 만료된 경우 refresh token으로 갱신 시도\r\n      const refreshToken = localStorage.getItem(TOKEN_CONFIG.refreshTokenKey);\r\n      if (refreshToken) {\r\n        try {\r\n          const response = await axios.post(`${API_BASE_URL}/reissue`, {\r\n            refreshToken: refreshToken\r\n          });\r\n          \r\n          if (response.data.accessToken) {\r\n            localStorage.setItem(TOKEN_CONFIG.accessTokenKey, response.data.accessToken);\r\n            // 원래 요청 재시도\r\n            error.config.headers.Authorization = `Bearer ${response.data.accessToken}`;\r\n            return api.request(error.config);\r\n          }\r\n        } catch (refreshError) {\r\n          // refresh token도 만료된 경우 로그아웃\r\n          localStorage.removeItem(TOKEN_CONFIG.accessTokenKey);\r\n          localStorage.removeItem(TOKEN_CONFIG.refreshTokenKey);\r\n          window.location.href = '/login';\r\n        }\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,EAAEC,YAAY,QAAQ,kBAAkB;;AAE7D;AACA,MAAMC,YAAY,GAAGF,YAAY,CAAC,CAAC,CAACG,OAAO;;AAE3C;AACA,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBF,OAAO,EAAED,YAAY;EACrBI,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAACb,YAAY,CAACc,cAAc,CAAC;EAC/D,IAAIH,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACS,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAM,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAb,GAAG,CAACI,YAAY,CAACY,QAAQ,CAACV,GAAG,CAC1BU,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACD,MAAOH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACf,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClC;IACA,MAAMC,YAAY,GAAGV,YAAY,CAACC,OAAO,CAACb,YAAY,CAACuB,eAAe,CAAC;IACvE,IAAID,YAAY,EAAE;MAChB,IAAI;QACF,MAAMH,QAAQ,GAAG,MAAMrB,KAAK,CAAC0B,IAAI,CAAC,GAAGvB,YAAY,UAAU,EAAE;UAC3DqB,YAAY,EAAEA;QAChB,CAAC,CAAC;QAEF,IAAIH,QAAQ,CAACM,IAAI,CAACC,WAAW,EAAE;UAC7Bd,YAAY,CAACe,OAAO,CAAC3B,YAAY,CAACc,cAAc,EAAEK,QAAQ,CAACM,IAAI,CAACC,WAAW,CAAC;UAC5E;UACAV,KAAK,CAACN,MAAM,CAACJ,OAAO,CAACS,aAAa,GAAG,UAAUI,QAAQ,CAACM,IAAI,CAACC,WAAW,EAAE;UAC1E,OAAOvB,GAAG,CAACK,OAAO,CAACQ,KAAK,CAACN,MAAM,CAAC;QAClC;MACF,CAAC,CAAC,OAAOkB,YAAY,EAAE;QACrB;QACAhB,YAAY,CAACiB,UAAU,CAAC7B,YAAY,CAACc,cAAc,CAAC;QACpDF,YAAY,CAACiB,UAAU,CAAC7B,YAAY,CAACuB,eAAe,CAAC;QACrDO,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;MACjC;IACF;EACF;EACA,OAAOf,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeb,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}