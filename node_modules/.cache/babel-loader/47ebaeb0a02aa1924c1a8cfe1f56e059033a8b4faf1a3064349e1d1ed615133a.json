{"ast":null,"code":"// src/utils/axios.js\nimport axios from 'axios';\n\n// 페이지에서 공통으로 사용할 axios 객체 생성함\nconst apiClient = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true // 쿠키 포함 여부\n});\n\n// 요청 인터셉터 (토큰 처리)\napiClient.interceptors.request.use(response => {\n  // 요청이 성공해서, ok 가 전송왔을 때 공통 처리 내용 작성함\n  // await 사용으로 .then((response) => { 성공시 처리내용 }) 생략됨 => 이 부분을 담당함\n  console.log('Axios 요청 성공 : ', response);\n  return response;\n}, error => {\n  // 요청이 실패해서, fail 코드가 전송왔을 때 공통 처리 내용 작성함\n  // await 사용으로 .catch((error) => { 실패시 처리내용 }) 생략됨 => 이 부분을 담당함\n  console.error('Axios 응답 에러 : ', error);\n  return Promise.reject(error);\n}, config => {\n  // axios 로 요청시 같이 전송보낼 토큰 지정 처리\n  // 로그인 성공시 저장해 놓은 localStorage 에서 토큰을 꺼냄\n  const accessToken = localStorage.getItem('accessToken');\n  const refreshToken = localStorage.getItem('refreshToken');\n  if (accessToken && refreshToken) {\n    config.headers['Authorization'] = `Bearer ${accessToken}`; //빽틱 사용해야 함\n    config.headers['RefreshToken'] = `Bearer ${refreshToken}`; //빽틱 사용해야 함\n  }\n  return config;\n}, error => Promise.reject(error));\nexport default apiClient;","map":{"version":3,"names":["axios","apiClient","create","baseURL","process","env","REACT_APP_API_BASE_URL","headers","withCredentials","interceptors","request","use","response","console","log","error","Promise","reject","config","accessToken","localStorage","getItem","refreshToken"],"sources":["D:/seems_react_workspace/seems_react/src/utils/axios.js"],"sourcesContent":["// src/utils/axios.js\r\nimport axios from 'axios';\r\n\r\n// 페이지에서 공통으로 사용할 axios 객체 생성함\r\nconst apiClient = axios.create({\r\n  baseURL: process.env.REACT_APP_API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  withCredentials: true, // 쿠키 포함 여부\r\n});\r\n\r\n// 요청 인터셉터 (토큰 처리)\r\napiClient.interceptors.request.use(\r\n  (response) => {\r\n    // 요청이 성공해서, ok 가 전송왔을 때 공통 처리 내용 작성함\r\n    // await 사용으로 .then((response) => { 성공시 처리내용 }) 생략됨 => 이 부분을 담당함\r\n    console.log('Axios 요청 성공 : ', response);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // 요청이 실패해서, fail 코드가 전송왔을 때 공통 처리 내용 작성함\r\n    // await 사용으로 .catch((error) => { 실패시 처리내용 }) 생략됨 => 이 부분을 담당함\r\n    console.error('Axios 응답 에러 : ', error);\r\n    return Promise.reject(error);\r\n  },\r\n  (config) => {\r\n    // axios 로 요청시 같이 전송보낼 토큰 지정 처리\r\n    // 로그인 성공시 저장해 놓은 localStorage 에서 토큰을 꺼냄\r\n    const accessToken = localStorage.getItem('accessToken');\r\n    const refreshToken = localStorage.getItem('refreshToken');\r\n\r\n    if (accessToken && refreshToken) {\r\n      config.headers['Authorization'] = `Bearer ${accessToken}`; //빽틱 사용해야 함\r\n      config.headers['RefreshToken'] = `Bearer ${refreshToken}`; //빽틱 사용해야 함\r\n    }\r\n\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\nexport default apiClient;\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,sBAAsB;EAC3CC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,eAAe,EAAE,IAAI,CAAE;AACzB,CAAC,CAAC;;AAEF;AACAP,SAAS,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,QAAQ,IAAK;EACZ;EACA;EACAC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,QAAQ,CAAC;EACvC,OAAOA,QAAQ;AACjB,CAAC,EACAG,KAAK,IAAK;EACT;EACA;EACAF,OAAO,CAACE,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;EACtC,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,EACAG,MAAM,IAAK;EACV;EACA;EACA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EACvD,MAAMC,YAAY,GAAGF,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAEzD,IAAIF,WAAW,IAAIG,YAAY,EAAE;IAC/BJ,MAAM,CAACX,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUY,WAAW,EAAE,CAAC,CAAC;IAC3DD,MAAM,CAACX,OAAO,CAAC,cAAc,CAAC,GAAG,UAAUe,YAAY,EAAE,CAAC,CAAC;EAC7D;EAEA,OAAOJ,MAAM;AACf,CAAC,EACAH,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;AAED,eAAed,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}